{"version":3,"sources":["components/header.js","dataCompile.js","components/Box.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["Header","rangeValue","setrangeValue","className","htmlFor","type","id","name","min","max","value","onChange","e","currentTarget","compiledData","range","Covid","reduce","cityValue","push","particles","location","date","slice","map","normalizedParticles","Math","floor","console","log","material","THREE","color","Box","props","ref","useRef","height","visible","receiveShadow","args","position","App","useState","barValues","setbarValues","useEffect","throttled","throttle","newValue","current","camera","fov","intensity","castShadow","Text","anchorY","maxWidth","fontSize","length","index","Fragment","BARWIDTH","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa26c579.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ rangeValue, setrangeValue }) => {\n    const onchange = (e) => {\n        setrangeValue(e.currentTarget.value);\n    };\n    return (\n        <header>\n            <div className=\"form\">\n                <form>\n                    <label htmlFor=\"vol\">\n                        Aantal getoonde resultaten: {rangeValue}\n                    </label>\n                    <br />\n                    <input\n                        type=\"range\"\n                        id=\"rangeInput\"\n                        name=\"vol\"\n                        min=\"4\"\n                        max=\"25\"\n                        value={rangeValue}\n                        onChange={onchange}\n                    ></input>\n                </form>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;\n","import Covid from \"./data/covid.json\";\n\nfunction compiledData(range) {\n    return Covid.reduce((cityValue, e) => {\n        // filtering out empty results\n        if (e[\"RNA_flow_per_100000\"] === 0) {\n            return cityValue;\n        }\n        // creating a new array containing objectes with particles, location and date\n        cityValue.push({\n            particles: e[\"RNA_flow_per_100000\"],\n            location: e[\"RWZI_AWZI_name\"],\n            date: e[\"Date_measurement\"],\n        });\n        return cityValue;\n    }, [])\n        .slice(0, range ? range : 10)\n        .map((e) => ({\n            ...e,\n            normalizedParticles: Math.floor(e.particles / 1000000000),\n        }));\n}\n\nconsole.log(compiledData(10));\n\nexport default compiledData;\n","import React, { useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { maxParticles, BARWIDTH } from \"../config\";\n\nconst material = new THREE.MeshStandardMaterial({\n    color: \"#219\",\n});\n\nfunction Box({ value, ...props }) {\n    const ref = useRef();\n    let height = (4 / maxParticles) * value;\n    return (\n        <group {...props}>\n            <mesh\n                visible={true}\n                ref={ref}\n                material={material}\n                receiveShadow={true}\n            >\n                <boxGeometry\n                    args={[BARWIDTH, height, BARWIDTH]}\n                    position={[0, height / 2, 0]}\n                />\n            </mesh>\n        </group>\n    );\n}\n\nexport default Box;\n","export const maxParticles = 80000;\nexport const BARWIDTH = 1;\nexport const GAP = 0.1;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, Text } from \"@react-three/drei\";\nimport Header from \"./components/header\";\nimport \"./App.css\";\nimport compiledData from \"./dataCompile\";\nimport { throttle } from \"lodash\";\nimport { maxParticles, BARWIDTH, GAP } from \"./config\";\nimport Box from \"./components/Box\";\n\nconst App = () => {\n    const [rangeValue, setrangeValue] = useState(10);\n    const [barValues, setbarValues] = useState(compiledData(rangeValue));\n    useEffect(() => {\n        setrangeValue(rangeValue);\n    }, [rangeValue]);\n    const throttled = useRef(\n        throttle((newValue) => {\n            setbarValues(compiledData(newValue));\n        }, 100)\n    );\n\n    useEffect(() => {\n        throttled.current(rangeValue);\n    }, [rangeValue]);\n\n    return (\n        <>\n            <Header rangeValue={rangeValue} setrangeValue={setrangeValue} />\n\n            <Canvas camera={{ fov: 90, position: [0, 4, 6] }}>\n                {/* <gridHelper /> */}\n                <ambientLight intensity={0.4} />\n                <pointLight position={[10, 5, 10]} castShadow={true} />\n                <Text\n                    anchorY=\"bottom\"\n                    maxWidth={10}\n                    position={[0, 3.2, 0.6]}\n                    fontSize={0.3}\n                >\n                    Corona deeltjes per 100.000 inwoners x 1 miljard\n                </Text>\n                <group\n                    position={[\n                        barValues.length * (BARWIDTH + GAP) * -0.5,\n                        0,\n                        0,\n                    ]}\n                >\n                    {barValues.map(({ normalizedParticles }, index) => (\n                        <React.Fragment key={index}>\n                            <Box\n                                position={[\n                                    (BARWIDTH + GAP) * index,\n                                    ((4 / maxParticles) * normalizedParticles) /\n                                        2,\n                                    0,\n                                ]}\n                                value={normalizedParticles}\n                            />\n                            <Text\n                                anchorY=\"bottom\"\n                                maxWidth={BARWIDTH - 0.1}\n                                fontSize={0.13}\n                                position={[(BARWIDTH + GAP) * index, 2.8, 0.6]}\n                            >\n                                {normalizedParticles}\n                            </Text>\n                        </React.Fragment>\n                    ))}\n                    {barValues.map(({ location }, index) => (\n                        <Text\n                            key={index}\n                            maxWidth={BARWIDTH - 0.1}\n                            fontSize={0.13}\n                            position={[(BARWIDTH + GAP) * index, 0.13, 0.6]}\n                        >\n                            {location}\n                        </Text>\n                    ))}\n                </group>\n                <OrbitControls></OrbitControls>\n            </Canvas>\n        </>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}